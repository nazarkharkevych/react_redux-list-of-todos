{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","helpers/debounce.ts","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","helpers/normalize.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","onSetTodo","currentTodoActions","length","className","map","classNames","id","completed","title","onClick","bind","TodoFilter","selectValue","useState","inputValue","setInputValue","applyQuery","useCallback","delay","timeoutId","value","clearTimeout","window","setTimeout","debounceDispatchAction","filterActions","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","fullURL","Promise","resolve","then","fetch","res","json","TodoModal","todoWithUser","setTodoWithUser","loadUserAndSetTodo","a","userId","user","useEffect","href","email","name","normalizeValue","toLowerCase","App","loadTodos","todosFromServer","todosActions","todosFilteredByStatus","useMemo","todosFilteredByTitle","normalizedTitle","normalizedQuery","trim","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16a5a521.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilterQueryAction = {\n  type: 'filter/setQuery',\n  payload: string,\n};\n\ntype SetFilterStatusAction = {\n  type: 'filter/setStatus',\n  payload: Status,\n};\n\nconst setQuery = (query: string): SetFilterQueryAction => ({\n  type: 'filter/setQuery',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetFilterStatusAction => ({\n  type: 'filter/setStatus',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\ntype Action = SetFilterQueryAction | SetFilterStatusAction;\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/setQuery':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/setStatus':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload : Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch } from '../../app/hooks';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const onSetTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!todos.length\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={classNames(\n                    { 'has-background-info-light': selectedTodo?.id === todo.id },\n                  )}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames(\n                        { 'has-text-danger': !todo.completed },\n                        { 'has-text-success': todo.completed },\n                      )}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={onSetTodo.bind(null, todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames(\n                          'far',\n                          { 'fa-eye': selectedTodo?.id !== todo.id },\n                          { 'fa-eye-slash': selectedTodo?.id === todo.id },\n                        )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React, { ChangeEvent, useCallback, useState } from 'react';\nimport { Status } from '../../types/Status';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { debounceDispatchAction } from '../../helpers/debounce';\n\ntype Props = {\n  selectValue: Status;\n};\n\nexport const TodoFilter: React.FC<Props> = ({ selectValue }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const dispatch = useAppDispatch();\n\n  const applyQuery = useCallback(\n    debounceDispatchAction(dispatch, filterActions.setQuery, 300),\n    [],\n  );\n\n  const onSetSelectStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    dispatch(filterActions.setStatus(value as Status));\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setInputValue(value);\n    applyQuery(value);\n  };\n\n  const handleInputReset = () => {\n    setInputValue('');\n    applyQuery('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectValue}\n            onChange={onSetSelectStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!inputValue && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleInputReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { AppDispatch } from '../app/store';\n\nexport function debounceDispatchAction<T>(\n  dispatch: AppDispatch,\n  action: (value: T) => any,\n  delay: number,\n) {\n  let timeoutId: number;\n\n  return (value: T) => {\n    clearTimeout(timeoutId);\n\n    timeoutId = window.setTimeout(() => {\n      dispatch(action(value));\n    }, delay);\n  };\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch } from '../../app/hooks';\n\ntype Props = {\n  todo: Todo;\n};\n\ntype TodoWithUser = Todo & { user: User };\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n}) => {\n  const [todoWithUser, setTodoWithUser] = useState<TodoWithUser | null>(null);\n  const dispatch = useAppDispatch();\n\n  const loadUserAndSetTodo = async () => {\n    const user = await getUser(todo.userId);\n\n    setTodoWithUser({\n      ...todo,\n      user,\n    });\n  };\n\n  useEffect(() => {\n    loadUserAndSetTodo();\n  }, []);\n\n  const onCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todoWithUser\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todoWithUser.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onCloseModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todoWithUser.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todoWithUser.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${todoWithUser.user.email}`}>\n                  {todoWithUser.user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","export const normalizeValue = (value: string) => value.toLowerCase();\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { normalizeValue } from './helpers/normalize';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const loadTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(todosActions.setTodos(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const todosFilteredByStatus = useMemo(() => {\n    return todos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        case 'all':\n        default:\n          return true;\n      }\n    });\n  }, [status, todos]);\n\n  const todosFilteredByTitle = useMemo(() => {\n    return todosFilteredByStatus.filter(todo => {\n      const normalizedTitle = normalizeValue(todo.title);\n      const normalizedQuery = normalizeValue(query.trim());\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }, [todosFilteredByStatus, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectValue={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={todosFilteredByTitle}\n                    selectedTodo={currentTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          todo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}